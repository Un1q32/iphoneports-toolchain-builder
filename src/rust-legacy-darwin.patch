diff --git a/compiler/rustc_codegen_ssa/src/back/link.rs b/compiler/rustc_codegen_ssa/src/back/link.rs
index 159c17b0af7..b3dc1447bd8 100644
--- a/compiler/rustc_codegen_ssa/src/back/link.rs
+++ b/compiler/rustc_codegen_ssa/src/back/link.rs
@@ -3077,6 +3077,8 @@ fn add_apple_link_args(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavo
     // Intentially verbose to ensure that the list always matches correctly
     // with the list in the source above.
     let ld64_arch = match llvm_arch {
+        "armv6" => "armv6",
+        "armv7" => "armv7",
         "armv7k" => "armv7k",
         "armv7s" => "armv7s",
         "arm64" => "arm64",
diff --git a/compiler/rustc_target/src/spec/base/apple/mod.rs b/compiler/rustc_target/src/spec/base/apple/mod.rs
index 46fcd7d5c51..a4671018be9 100644
--- a/compiler/rustc_target/src/spec/base/apple/mod.rs
+++ b/compiler/rustc_target/src/spec/base/apple/mod.rs
@@ -16,6 +16,8 @@
 #[allow(non_camel_case_types)]
 #[derive(Copy, Clone, PartialEq)]
 pub(crate) enum Arch {
+    Armv6,
+    Armv7,
     Armv7k,
     Armv7s,
     Arm64,
@@ -30,6 +32,8 @@ pub(crate) enum Arch {
 impl Arch {
     fn target_name(self) -> &'static str {
         match self {
+            Armv6 => "armv6",
+            Armv7 => "armv7",
             Armv7k => "armv7k",
             Armv7s => "armv7s",
             Arm64 => "arm64",
@@ -44,7 +48,7 @@ fn target_name(self) -> &'static str {
 
     pub(crate) fn target_arch(self) -> Cow<'static, str> {
         Cow::Borrowed(match self {
-            Armv7k | Armv7s => "arm",
+            Armv6 | Armv7 | Armv7k | Armv7s => "arm",
             Arm64 | Arm64e | Arm64_32 => "aarch64",
             I386 | I686 => "x86",
             X86_64 | X86_64h => "x86_64",
@@ -53,8 +57,10 @@ pub(crate) fn target_arch(self) -> Cow<'static, str> {
 
     fn target_cpu(self, abi: TargetAbi) -> &'static str {
         match self {
+            Armv6 => "arm1176jzf-s",
+            Armv7 => "cortex-a8",
             Armv7k => "cortex-a8",
-            Armv7s => "swift", // iOS 10 is only supported on iPhone 5 or higher.
+            Armv7s => "swift",
             Arm64 => match abi {
                 TargetAbi::Normal => "apple-a7",
                 TargetAbi::Simulator => "apple-a12",
@@ -62,21 +68,18 @@ fn target_cpu(self, abi: TargetAbi) -> &'static str {
             },
             Arm64e => "apple-a12",
             Arm64_32 => "apple-s4",
-            // Only macOS 10.12+ is supported, which means
-            // all x86_64/x86 CPUs must be running at least penryn
-            // https://github.com/llvm/llvm-project/blob/01f924d0e37a5deae51df0d77e10a15b63aa0c0f/clang/lib/Driver/ToolChains/Arch/X86.cpp#L79-L82
-            I386 | I686 => "penryn",
-            X86_64 => "penryn",
+            I386 | I686 => "pentium-m",
+            X86_64 => "core2",
             // Note: `core-avx2` is slightly more advanced than `x86_64h`, see
             // comments (and disabled features) in `x86_64h_apple_darwin` for
-            // details. It is a higher baseline then `penryn` however.
+            // details. It is a higher baseline then `core2` however.
             X86_64h => "core-avx2",
         }
     }
 
     fn stack_probes(self) -> StackProbeType {
         match self {
-            Armv7k | Armv7s => StackProbeType::None,
+            Armv6 | Armv7 | Armv7k | Armv7s => StackProbeType::None,
             Arm64 | Arm64e | Arm64_32 | I386 | I686 | X86_64 | X86_64h => StackProbeType::Inline,
         }
     }
@@ -120,16 +123,11 @@ pub(crate) fn base(
         families: cvs!["unix"],
         is_like_darwin: true,
         binary_format: BinaryFormat::MachO,
-        // LLVM notes that macOS 10.11+ and iOS 9+ default
-        // to v4, so we do the same.
-        // https://github.com/llvm/llvm-project/blob/378778a0d10c2f8d5df8ceff81f95b6002984a4b/clang/lib/Driver/ToolChains/Darwin.cpp#L1203
-        default_dwarf_version: 4,
+        default_dwarf_version: 2,
         frame_pointer: FramePointer::Always,
         has_rpath: true,
         dll_suffix: ".dylib".into(),
         archive_format: "darwin".into(),
-        // Thread locals became available with iOS 8 and macOS 10.7,
-        // and both are far below our minimum.
         has_thread_local: true,
         abi_return_struct_as_int: true,
         emit_debug_gdb_scripts: false,
@@ -285,10 +283,10 @@ pub fn os_minimum_deployment_target(os: &str) -> Self {
         // $ rustc --print deployment-target
         // ```
         let (major, minor, patch) = match os {
-            "macos" => (10, 12, 0),
-            "ios" => (10, 0, 0),
-            "tvos" => (10, 0, 0),
-            "watchos" => (5, 0, 0),
+            "macos" => (10, 5, 0),
+            "ios" => (2, 0, 0),
+            "tvos" => (8, 0, 0),
+            "watchos" => (2, 0, 0),
             "visionos" => (1, 0, 0),
             _ => unreachable!("tried to get deployment target for non-Apple platform"),
         };
@@ -305,9 +303,13 @@ pub fn os_minimum_deployment_target(os: &str) -> Self {
     pub fn minimum_deployment_target(target: &Target) -> Self {
         let (major, minor, patch) = match (&*target.os, &*target.arch, &*target.abi) {
             ("macos", "aarch64", _) => (11, 0, 0),
+            ("macos", "x86_64", _) => (10, 6, 0),
             ("ios", "aarch64", "macabi") => (14, 0, 0),
             ("ios", "aarch64", "sim") => (14, 0, 0),
             ("ios", _, _) if target.llvm_target.starts_with("arm64e") => (14, 0, 0),
+            ("ios", _, _) if target.llvm_target.starts_with("armv7s") => (6, 0, 0),
+            ("ios", _, _) if target.llvm_target.starts_with("armv7") => (3, 0, 0),
+            ("macos", _, _) if target.llvm_target.starts_with("x86_64h") => (10, 8, 0),
             // Mac Catalyst defaults to 13.1 in Clang.
             ("ios", _, "macabi") => (13, 1, 0),
             ("tvos", "aarch64", "sim") => (14, 0, 0),
diff --git a/compiler/rustc_target/src/spec/mod.rs b/compiler/rustc_target/src/spec/mod.rs
index 303be54a6d7..e21f0ff96c2 100644
--- a/compiler/rustc_target/src/spec/mod.rs
+++ b/compiler/rustc_target/src/spec/mod.rs
@@ -1866,6 +1866,8 @@ fn $module() {
     ("aarch64-apple-ios", aarch64_apple_ios),
     ("arm64e-apple-ios", arm64e_apple_ios),
     ("armv7s-apple-ios", armv7s_apple_ios),
+    ("armv7-apple-ios", armv7_apple_ios),
+    ("armv6-apple-ios", armv6_apple_ios),
     ("x86_64-apple-ios-macabi", x86_64_apple_ios_macabi),
     ("aarch64-apple-ios-macabi", aarch64_apple_ios_macabi),
     ("aarch64-apple-ios-sim", aarch64_apple_ios_sim),
diff --git a/compiler/rustc_target/src/spec/targets/aarch64_apple_ios.rs b/compiler/rustc_target/src/spec/targets/aarch64_apple_ios.rs
index 183a6c6f2d7..fc163e0aaaf 100644
--- a/compiler/rustc_target/src/spec/targets/aarch64_apple_ios.rs
+++ b/compiler/rustc_target/src/spec/targets/aarch64_apple_ios.rs
@@ -1,5 +1,5 @@
 use crate::spec::base::apple::{Arch, TargetAbi, base};
-use crate::spec::{FramePointer, SanitizerSet, Target, TargetMetadata, TargetOptions};
+use crate::spec::{Cc, LinkerFlavor, Lld, FramePointer, SanitizerSet, Target, TargetMetadata, TargetOptions};
 
 pub(crate) fn target() -> Target {
     let (opts, llvm_target, arch) = base("ios", Arch::Arm64, TargetAbi::Normal);
@@ -8,7 +8,7 @@ pub(crate) fn target() -> Target {
         metadata: TargetMetadata {
             description: Some("ARM64 Apple iOS".into()),
             tier: Some(2),
-            host_tools: Some(false),
+            host_tools: Some(true),
             std: Some(true),
         },
         pointer_width: 64,
@@ -20,6 +20,8 @@ pub(crate) fn target() -> Target {
             max_atomic_width: Some(128),
             frame_pointer: FramePointer::NonLeaf,
             supported_sanitizers: SanitizerSet::ADDRESS | SanitizerSet::THREAD,
+            has_thread_local: false,
+            late_link_args: TargetOptions::link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &["-lsyscompat"]),
             ..opts
         },
     }
diff --git a/compiler/rustc_target/src/spec/targets/aarch64_apple_tvos.rs b/compiler/rustc_target/src/spec/targets/aarch64_apple_tvos.rs
index 037685db1b3..90d0b097280 100644
--- a/compiler/rustc_target/src/spec/targets/aarch64_apple_tvos.rs
+++ b/compiler/rustc_target/src/spec/targets/aarch64_apple_tvos.rs
@@ -1,5 +1,5 @@
 use crate::spec::base::apple::{Arch, TargetAbi, base};
-use crate::spec::{FramePointer, Target, TargetMetadata, TargetOptions};
+use crate::spec::{Cc, LinkerFlavor, Lld, FramePointer, Target, TargetMetadata, TargetOptions};
 
 pub(crate) fn target() -> Target {
     let (opts, llvm_target, arch) = base("tvos", Arch::Arm64, TargetAbi::Normal);
@@ -19,6 +19,7 @@ pub(crate) fn target() -> Target {
             features: "+neon,+fp-armv8,+apple-a7".into(),
             max_atomic_width: Some(128),
             frame_pointer: FramePointer::NonLeaf,
+            late_link_args: TargetOptions::link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &["-lsyscompat"]),
             ..opts
         },
     }
diff --git a/compiler/rustc_target/src/spec/targets/arm64e_apple_ios.rs b/compiler/rustc_target/src/spec/targets/arm64e_apple_ios.rs
index 848dbeec199..03e4c091bd0 100644
--- a/compiler/rustc_target/src/spec/targets/arm64e_apple_ios.rs
+++ b/compiler/rustc_target/src/spec/targets/arm64e_apple_ios.rs
@@ -8,7 +8,7 @@ pub(crate) fn target() -> Target {
         metadata: TargetMetadata {
             description: Some("ARM64e Apple iOS".into()),
             tier: Some(3),
-            host_tools: Some(false),
+            host_tools: Some(true),
             std: Some(true),
         },
         pointer_width: 64,
diff --git a/compiler/rustc_target/src/spec/targets/armv6_apple_ios.rs b/compiler/rustc_target/src/spec/targets/armv6_apple_ios.rs
new file mode 100644
index 00000000000..190c3621594
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/armv6_apple_ios.rs
@@ -0,0 +1,25 @@
+use crate::spec::base::apple::{Arch, TargetAbi, base};
+use crate::spec::{Cc, LinkerFlavor, Lld, Target, TargetMetadata, TargetOptions};
+
+pub(crate) fn target() -> Target {
+    let (opts, llvm_target, arch) = base("ios", Arch::Armv6, TargetAbi::Normal);
+    Target {
+        llvm_target,
+        metadata: TargetMetadata {
+            description: Some("ARMv6K Apple iOS".into()),
+            tier: Some(3),
+            host_tools: Some(true),
+            std: Some(true),
+        },
+        pointer_width: 32,
+        data_layout: "e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32".into(),
+        arch,
+        options: TargetOptions {
+            features: "+v6,+vfp2".into(),
+            max_atomic_width: Some(64),
+            has_thread_local: false,
+            late_link_args: TargetOptions::link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &["-lgcc_s.1", "-lsyscompat"]),
+            ..opts
+        },
+    }
+}
diff --git a/compiler/rustc_target/src/spec/targets/armv7_apple_ios.rs b/compiler/rustc_target/src/spec/targets/armv7_apple_ios.rs
new file mode 100644
index 00000000000..c57a031ab60
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/armv7_apple_ios.rs
@@ -0,0 +1,25 @@
+use crate::spec::base::apple::{Arch, TargetAbi, base};
+use crate::spec::{Cc, LinkerFlavor, Lld, Target, TargetMetadata, TargetOptions};
+
+pub(crate) fn target() -> Target {
+    let (opts, llvm_target, arch) = base("ios", Arch::Armv7, TargetAbi::Normal);
+    Target {
+        llvm_target,
+        metadata: TargetMetadata {
+            description: Some("ARMv7-A Apple iOS".into()),
+            tier: Some(3),
+            host_tools: Some(true),
+            std: Some(true),
+        },
+        pointer_width: 32,
+        data_layout: "e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32".into(),
+        arch,
+        options: TargetOptions {
+            features: "+v7,+vfp3,+neon".into(),
+            max_atomic_width: Some(64),
+            has_thread_local: false,
+            late_link_args: TargetOptions::link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &["-lgcc_s.1", "-lsyscompat"]),
+            ..opts
+        },
+    }
+}
diff --git a/compiler/rustc_target/src/spec/targets/armv7k_apple_watchos.rs b/compiler/rustc_target/src/spec/targets/armv7k_apple_watchos.rs
index 8103d132cea..7c3db0b59e4 100644
--- a/compiler/rustc_target/src/spec/targets/armv7k_apple_watchos.rs
+++ b/compiler/rustc_target/src/spec/targets/armv7k_apple_watchos.rs
@@ -1,5 +1,5 @@
 use crate::spec::base::apple::{Arch, TargetAbi, base};
-use crate::spec::{Target, TargetMetadata, TargetOptions};
+use crate::spec::{Cc, LinkerFlavor, Lld, Target, TargetMetadata, TargetOptions};
 
 pub(crate) fn target() -> Target {
     let (opts, llvm_target, arch) = base("watchos", Arch::Armv7k, TargetAbi::Normal);
@@ -19,6 +19,7 @@ pub(crate) fn target() -> Target {
             max_atomic_width: Some(64),
             dynamic_linking: false,
             position_independent_executables: true,
+            late_link_args: TargetOptions::link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &["-lsyscompat"]),
             ..opts
         },
     }
diff --git a/compiler/rustc_target/src/spec/targets/armv7s_apple_ios.rs b/compiler/rustc_target/src/spec/targets/armv7s_apple_ios.rs
index ba9edd71461..66280afe509 100644
--- a/compiler/rustc_target/src/spec/targets/armv7s_apple_ios.rs
+++ b/compiler/rustc_target/src/spec/targets/armv7s_apple_ios.rs
@@ -1,5 +1,5 @@
 use crate::spec::base::apple::{Arch, TargetAbi, base};
-use crate::spec::{Target, TargetMetadata, TargetOptions};
+use crate::spec::{Cc, LinkerFlavor, Lld, Target, TargetMetadata, TargetOptions};
 
 pub(crate) fn target() -> Target {
     let (opts, llvm_target, arch) = base("ios", Arch::Armv7s, TargetAbi::Normal);
@@ -8,7 +8,7 @@ pub(crate) fn target() -> Target {
         metadata: TargetMetadata {
             description: Some("ARMv7-A Apple-A6 Apple iOS".into()),
             tier: Some(3),
-            host_tools: Some(false),
+            host_tools: Some(true),
             std: Some(true),
         },
         pointer_width: 32,
@@ -17,6 +17,8 @@ pub(crate) fn target() -> Target {
         options: TargetOptions {
             features: "+v7,+vfp4,+neon".into(),
             max_atomic_width: Some(64),
+            has_thread_local: false,
+            late_link_args: TargetOptions::link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &["-lsyscompat"]),
             ..opts
         },
     }
diff --git a/compiler/rustc_target/src/spec/targets/i386_apple_ios.rs b/compiler/rustc_target/src/spec/targets/i386_apple_ios.rs
index 29865fcd4c4..cb6ec2d969a 100644
--- a/compiler/rustc_target/src/spec/targets/i386_apple_ios.rs
+++ b/compiler/rustc_target/src/spec/targets/i386_apple_ios.rs
@@ -1,5 +1,5 @@
 use crate::spec::base::apple::{Arch, TargetAbi, base};
-use crate::spec::{Target, TargetMetadata, TargetOptions};
+use crate::spec::{Cc, LinkerFlavor, Lld, Target, TargetMetadata, TargetOptions};
 
 pub(crate) fn target() -> Target {
     // i386-apple-ios is a simulator target, even though it isn't declared
@@ -18,6 +18,11 @@ pub(crate) fn target() -> Target {
             i128:128-f64:32:64-f80:128-n8:16:32-S128"
             .into(),
         arch,
-        options: TargetOptions { max_atomic_width: Some(64), ..opts },
+        options: TargetOptions {
+            max_atomic_width: Some(64),
+            has_thread_local: false,
+            late_link_args: TargetOptions::link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &["-lsyscompat"]),
+            ..opts
+        },
     }
 }
diff --git a/compiler/rustc_target/src/spec/targets/i686_apple_darwin.rs b/compiler/rustc_target/src/spec/targets/i686_apple_darwin.rs
index 161db9a08bb..23179139b6e 100644
--- a/compiler/rustc_target/src/spec/targets/i686_apple_darwin.rs
+++ b/compiler/rustc_target/src/spec/targets/i686_apple_darwin.rs
@@ -1,12 +1,12 @@
 use crate::spec::base::apple::{Arch, TargetAbi, base};
-use crate::spec::{FramePointer, Target, TargetMetadata, TargetOptions};
+use crate::spec::{Cc, LinkerFlavor, Lld, FramePointer, Target, TargetMetadata, TargetOptions};
 
 pub(crate) fn target() -> Target {
     let (opts, llvm_target, arch) = base("macos", Arch::I686, TargetAbi::Normal);
     Target {
         llvm_target,
         metadata: TargetMetadata {
-            description: Some("x86 Apple macOS (10.12+, Sierra+)".into()),
+            description: Some("x86 Apple macOS (10.5+, Leopard+)".into()),
             tier: Some(3),
             host_tools: Some(true),
             std: Some(true),
@@ -20,6 +20,8 @@ pub(crate) fn target() -> Target {
             mcount: "\u{1}mcount".into(),
             max_atomic_width: Some(64),
             frame_pointer: FramePointer::Always,
+            has_thread_local: false,
+            late_link_args: TargetOptions::link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &["-lgcc_s.1", "-lsyscompat"]),
             ..opts
         },
     }
diff --git a/compiler/rustc_target/src/spec/targets/x86_64_apple_darwin.rs b/compiler/rustc_target/src/spec/targets/x86_64_apple_darwin.rs
index 2f868e38f1a..f7fc2c4c32b 100644
--- a/compiler/rustc_target/src/spec/targets/x86_64_apple_darwin.rs
+++ b/compiler/rustc_target/src/spec/targets/x86_64_apple_darwin.rs
@@ -1,12 +1,12 @@
 use crate::spec::base::apple::{Arch, TargetAbi, base};
-use crate::spec::{FramePointer, SanitizerSet, Target, TargetMetadata, TargetOptions};
+use crate::spec::{Cc, LinkerFlavor, Lld, FramePointer, SanitizerSet, Target, TargetMetadata, TargetOptions};
 
 pub(crate) fn target() -> Target {
     let (opts, llvm_target, arch) = base("macos", Arch::X86_64, TargetAbi::Normal);
     Target {
         llvm_target,
         metadata: TargetMetadata {
-            description: Some("x86_64 Apple macOS (10.12+, Sierra+)".into()),
+            description: Some("x86_64 Apple macOS (10.6+, Snow Leopard+)".into()),
             tier: Some(1),
             host_tools: Some(true),
             std: Some(true),
@@ -17,12 +17,14 @@ pub(crate) fn target() -> Target {
         arch,
         options: TargetOptions {
             mcount: "\u{1}mcount".into(),
-            max_atomic_width: Some(128), // penryn+ supports cmpxchg16b
+            max_atomic_width: Some(128), // core2+ supports cmpxchg16b
             frame_pointer: FramePointer::Always,
             supported_sanitizers: SanitizerSet::ADDRESS
                 | SanitizerSet::CFI
                 | SanitizerSet::LEAK
                 | SanitizerSet::THREAD,
+            has_thread_local: false,
+            late_link_args: TargetOptions::link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &["-lsyscompat"]),
             ..opts
         },
     }
diff --git a/compiler/rustc_target/src/spec/targets/x86_64_apple_ios.rs b/compiler/rustc_target/src/spec/targets/x86_64_apple_ios.rs
index df45f430ecb..fc0622dded6 100644
--- a/compiler/rustc_target/src/spec/targets/x86_64_apple_ios.rs
+++ b/compiler/rustc_target/src/spec/targets/x86_64_apple_ios.rs
@@ -1,5 +1,5 @@
 use crate::spec::base::apple::{Arch, TargetAbi, base};
-use crate::spec::{SanitizerSet, Target, TargetMetadata, TargetOptions};
+use crate::spec::{Cc, LinkerFlavor, Lld, SanitizerSet, Target, TargetMetadata, TargetOptions};
 
 pub(crate) fn target() -> Target {
     // x86_64-apple-ios is a simulator target, even though it isn't declared
@@ -20,6 +20,8 @@ pub(crate) fn target() -> Target {
         options: TargetOptions {
             max_atomic_width: Some(128),
             supported_sanitizers: SanitizerSet::ADDRESS | SanitizerSet::THREAD,
+            has_thread_local: false,
+            late_link_args: TargetOptions::link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &["-lsyscompat"]),
             ..opts
         },
     }
diff --git a/compiler/rustc_target/src/spec/targets/x86_64_apple_tvos.rs b/compiler/rustc_target/src/spec/targets/x86_64_apple_tvos.rs
index 80ca80013f0..c1dd8b2bd87 100644
--- a/compiler/rustc_target/src/spec/targets/x86_64_apple_tvos.rs
+++ b/compiler/rustc_target/src/spec/targets/x86_64_apple_tvos.rs
@@ -1,5 +1,5 @@
 use crate::spec::base::apple::{Arch, TargetAbi, base};
-use crate::spec::{Target, TargetMetadata, TargetOptions};
+use crate::spec::{Cc, LinkerFlavor, Lld, Target, TargetMetadata, TargetOptions};
 
 pub(crate) fn target() -> Target {
     // x86_64-apple-tvos is a simulator target, even though it isn't declared
@@ -17,6 +17,10 @@ pub(crate) fn target() -> Target {
         data_layout:
             "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128".into(),
         arch,
-        options: TargetOptions { max_atomic_width: Some(128), ..opts },
+        options: TargetOptions {
+            max_atomic_width: Some(128),
+            late_link_args: TargetOptions::link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &["-lsyscompat"]),
+            ..opts
+        },
     }
 }
diff --git a/compiler/rustc_target/src/spec/targets/x86_64_apple_watchos_sim.rs b/compiler/rustc_target/src/spec/targets/x86_64_apple_watchos_sim.rs
index c503baedb8b..504af53384f 100644
--- a/compiler/rustc_target/src/spec/targets/x86_64_apple_watchos_sim.rs
+++ b/compiler/rustc_target/src/spec/targets/x86_64_apple_watchos_sim.rs
@@ -1,5 +1,5 @@
 use crate::spec::base::apple::{Arch, TargetAbi, base};
-use crate::spec::{Target, TargetMetadata, TargetOptions};
+use crate::spec::{Cc, LinkerFlavor, Lld, Target, TargetMetadata, TargetOptions};
 
 pub(crate) fn target() -> Target {
     let (opts, llvm_target, arch) = base("watchos", Arch::X86_64, TargetAbi::Simulator);
@@ -15,6 +15,11 @@ pub(crate) fn target() -> Target {
         data_layout:
             "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128".into(),
         arch,
-        options: TargetOptions { max_atomic_width: Some(128), ..opts },
+        options: TargetOptions {
+            max_atomic_width: Some(128),
+            has_thread_local: false,
+            late_link_args: TargetOptions::link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &["-lsyscompat"]),
+            ..opts
+        },
     }
 }
diff --git a/compiler/rustc_target/src/spec/targets/x86_64h_apple_darwin.rs b/compiler/rustc_target/src/spec/targets/x86_64h_apple_darwin.rs
index 11010b7d92f..d7c34f6f0b0 100644
--- a/compiler/rustc_target/src/spec/targets/x86_64h_apple_darwin.rs
+++ b/compiler/rustc_target/src/spec/targets/x86_64h_apple_darwin.rs
@@ -1,5 +1,5 @@
 use crate::spec::base::apple::{Arch, TargetAbi, base};
-use crate::spec::{FramePointer, SanitizerSet, Target, TargetMetadata, TargetOptions};
+use crate::spec::{Cc, LinkerFlavor, Lld, FramePointer, SanitizerSet, Target, TargetMetadata, TargetOptions};
 
 pub(crate) fn target() -> Target {
     let (mut opts, llvm_target, arch) = base("macos", Arch::X86_64h, TargetAbi::Normal);
@@ -38,6 +38,10 @@ pub(crate) fn target() -> Target {
         data_layout:
             "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128".into(),
         arch,
-        options: TargetOptions { mcount: "\u{1}mcount".into(), ..opts },
+        options: TargetOptions {
+            mcount: "\u{1}mcount".into(),
+            late_link_args: TargetOptions::link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &["-lsyscompat"]),
+            ..opts
+        },
     }
 }
diff --git a/library/std/Cargo.toml b/library/std/Cargo.toml
index 7915196e8e8..3fdf5574149 100644
--- a/library/std/Cargo.toml
+++ b/library/std/Cargo.toml
@@ -10,7 +10,7 @@ edition = "2024"
 autobenches = false
 
 [lib]
-crate-type = ["dylib", "rlib"]
+crate-type = ["rlib"]
 
 [dependencies]
 alloc = { path = "../alloc", public = true }
diff --git a/library/std/src/sys/process/unix/unix.rs b/library/std/src/sys/process/unix/unix.rs
index 1b3bd2de265..a11f48bc39e 100644
--- a/library/std/src/sys/process/unix/unix.rs
+++ b/library/std/src/sys/process/unix/unix.rs
@@ -5,8 +5,6 @@
 #[cfg(not(any(
     target_os = "vxworks",
     target_os = "l4re",
-    target_os = "tvos",
-    target_os = "watchos",
 )))]
 use libc::{gid_t, uid_t};
 
@@ -162,26 +160,9 @@ pub fn spawn(
         }
     }
 
-    // WatchOS and TVOS headers mark the `fork`/`exec*` functions with
-    // `__WATCHOS_PROHIBITED __TVOS_PROHIBITED`, and indicate that the
-    // `posix_spawn*` functions should be used instead. It isn't entirely clear
-    // what `PROHIBITED` means here (e.g. if calls to these functions are
-    // allowed to exist in dead code), but it sounds bad, so we go out of our
-    // way to avoid that all-together.
-    #[cfg(any(target_os = "tvos", target_os = "watchos"))]
-    const ERR_APPLE_TV_WATCH_NO_FORK_EXEC: Error = io::const_error!(
-        ErrorKind::Unsupported,
-        "`fork`+`exec`-based process spawning is not supported on this target",
-    );
-
-    #[cfg(any(target_os = "tvos", target_os = "watchos"))]
-    unsafe fn do_fork(&mut self) -> Result<pid_t, io::Error> {
-        return Err(Self::ERR_APPLE_TV_WATCH_NO_FORK_EXEC);
-    }
-
     // Attempts to fork the process. If successful, returns Ok((0, -1))
     // in the child, and Ok((child_pid, -1)) in the parent.
-    #[cfg(not(any(target_os = "watchos", target_os = "tvos", target_os = "nto")))]
+    #[cfg(not(target_os = "nto"))]
     unsafe fn do_fork(&mut self) -> Result<pid_t, io::Error> {
         cvt(libc::fork())
     }
@@ -272,7 +253,6 @@ pub fn exec(&mut self, default: Stdio) -> io::Error {
     // allocation). Instead we just close it manually. This will never
     // have the drop glue anyway because this code never returns (the
     // child will either exec() or invoke libc::exit)
-    #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
     unsafe fn do_exec(
         &mut self,
         stdio: ChildPipes,
@@ -394,15 +374,6 @@ fn drop(&mut self) {
         Err(io::Error::last_os_error())
     }
 
-    #[cfg(any(target_os = "tvos", target_os = "watchos"))]
-    unsafe fn do_exec(
-        &mut self,
-        _stdio: ChildPipes,
-        _maybe_envp: Option<&CStringArray>,
-    ) -> Result<!, io::Error> {
-        return Err(Self::ERR_APPLE_TV_WATCH_NO_FORK_EXEC);
-    }
-
     #[cfg(not(any(
         target_os = "freebsd",
         target_os = "illumos",
diff --git a/library/std/src/sys/random/mod.rs b/library/std/src/sys/random/mod.rs
index 013e886a99b..138f24bd8ae 100644
--- a/library/std/src/sys/random/mod.rs
+++ b/library/std/src/sys/random/mod.rs
@@ -6,9 +6,6 @@
     } else if #[cfg(target_os = "windows")] {
         mod windows;
         pub use windows::fill_bytes;
-    } else if #[cfg(target_vendor = "apple")] {
-        mod apple;
-        pub use apple::fill_bytes;
     // Others, in alphabetical ordering.
     } else if #[cfg(any(
         target_os = "dragonfly",
@@ -40,6 +37,7 @@
         mod getrandom;
         pub use getrandom::fill_bytes;
     } else if #[cfg(any(
+        target_vendor = "apple",
         target_os = "aix",
         target_os = "hurd",
         target_os = "l4re",
diff --git a/library/std/src/sys/sync/thread_parking/darwin.rs b/library/std/src/sys/sync/thread_parking/darwin.rs
deleted file mode 100644
index b9bcc538c65..00000000000
--- a/library/std/src/sys/sync/thread_parking/darwin.rs
+++ /dev/null
@@ -1,130 +0,0 @@
-//! Thread parking for Darwin-based systems.
-//!
-//! Darwin actually has futex syscalls (`__ulock_wait`/`__ulock_wake`), but they
-//! cannot be used in `std` because they are non-public (their use will lead to
-//! rejection from the App Store).
-//!
-//! Therefore, we need to look for other synchronization primitives. Luckily, Darwin
-//! supports semaphores, which allow us to implement the behavior we need with
-//! only one primitive (as opposed to a mutex-condvar pair). We use the semaphore
-//! provided by libdispatch, as the underlying Mach semaphore is only dubiously
-//! public.
-
-#![allow(non_camel_case_types)]
-
-use crate::pin::Pin;
-use crate::sync::atomic::Ordering::{Acquire, Release};
-use crate::sync::atomic::{Atomic, AtomicI8};
-use crate::time::Duration;
-
-type dispatch_semaphore_t = *mut crate::ffi::c_void;
-type dispatch_time_t = u64;
-
-const DISPATCH_TIME_NOW: dispatch_time_t = 0;
-const DISPATCH_TIME_FOREVER: dispatch_time_t = !0;
-
-// Contained in libSystem.dylib, which is linked by default.
-unsafe extern "C" {
-    fn dispatch_time(when: dispatch_time_t, delta: i64) -> dispatch_time_t;
-    fn dispatch_semaphore_create(val: isize) -> dispatch_semaphore_t;
-    fn dispatch_semaphore_wait(dsema: dispatch_semaphore_t, timeout: dispatch_time_t) -> isize;
-    fn dispatch_semaphore_signal(dsema: dispatch_semaphore_t) -> isize;
-    fn dispatch_release(object: *mut crate::ffi::c_void);
-}
-
-const EMPTY: i8 = 0;
-const NOTIFIED: i8 = 1;
-const PARKED: i8 = -1;
-
-pub struct Parker {
-    semaphore: dispatch_semaphore_t,
-    state: Atomic<i8>,
-}
-
-unsafe impl Sync for Parker {}
-unsafe impl Send for Parker {}
-
-impl Parker {
-    pub unsafe fn new_in_place(parker: *mut Parker) {
-        let semaphore = dispatch_semaphore_create(0);
-        assert!(
-            !semaphore.is_null(),
-            "failed to create dispatch semaphore for thread synchronization"
-        );
-        parker.write(Parker { semaphore, state: AtomicI8::new(EMPTY) })
-    }
-
-    // Does not need `Pin`, but other implementation do.
-    pub unsafe fn park(self: Pin<&Self>) {
-        // The semaphore counter must be zero at this point, because unparking
-        // threads will not actually increase it until we signalled that we
-        // are waiting.
-
-        // Change NOTIFIED to EMPTY and EMPTY to PARKED.
-        if self.state.fetch_sub(1, Acquire) == NOTIFIED {
-            return;
-        }
-
-        // Another thread may increase the semaphore counter from this point on.
-        // If it is faster than us, we will decrement it again immediately below.
-        // If we are faster, we wait.
-
-        // Ensure that the semaphore counter has actually been decremented, even
-        // if the call timed out for some reason.
-        while dispatch_semaphore_wait(self.semaphore, DISPATCH_TIME_FOREVER) != 0 {}
-
-        // At this point, the semaphore counter is zero again.
-
-        // We were definitely woken up, so we don't need to check the state.
-        // Still, we need to reset the state using a swap to observe the state
-        // change with acquire ordering.
-        self.state.swap(EMPTY, Acquire);
-    }
-
-    // Does not need `Pin`, but other implementation do.
-    pub unsafe fn park_timeout(self: Pin<&Self>, dur: Duration) {
-        if self.state.fetch_sub(1, Acquire) == NOTIFIED {
-            return;
-        }
-
-        let nanos = dur.as_nanos().try_into().unwrap_or(i64::MAX);
-        let timeout = dispatch_time(DISPATCH_TIME_NOW, nanos);
-
-        let timeout = dispatch_semaphore_wait(self.semaphore, timeout) != 0;
-
-        let state = self.state.swap(EMPTY, Acquire);
-        if state == NOTIFIED && timeout {
-            // If the state was NOTIFIED but semaphore_wait returned without
-            // decrementing the count because of a timeout, it means another
-            // thread is about to call semaphore_signal. We must wait for that
-            // to happen to ensure the semaphore count is reset.
-            while dispatch_semaphore_wait(self.semaphore, DISPATCH_TIME_FOREVER) != 0 {}
-        } else {
-            // Either a timeout occurred and we reset the state before any thread
-            // tried to wake us up, or we were woken up and reset the state,
-            // making sure to observe the state change with acquire ordering.
-            // Either way, the semaphore counter is now zero again.
-        }
-    }
-
-    // Does not need `Pin`, but other implementation do.
-    pub fn unpark(self: Pin<&Self>) {
-        let state = self.state.swap(NOTIFIED, Release);
-        if state == PARKED {
-            unsafe {
-                dispatch_semaphore_signal(self.semaphore);
-            }
-        }
-    }
-}
-
-impl Drop for Parker {
-    fn drop(&mut self) {
-        // SAFETY:
-        // We always ensure that the semaphore count is reset, so this will
-        // never cause an exception.
-        unsafe {
-            dispatch_release(self.semaphore);
-        }
-    }
-}
diff --git a/library/std/src/sys/sync/thread_parking/mod.rs b/library/std/src/sys/sync/thread_parking/mod.rs
index f4d8fa0a58c..da8bcf5ec67 100644
--- a/library/std/src/sys/sync/thread_parking/mod.rs
+++ b/library/std/src/sys/sync/thread_parking/mod.rs
@@ -22,10 +22,6 @@
     } else if #[cfg(target_vendor = "win7")] {
         mod windows7;
         pub use windows7::Parker;
-    } else if #[cfg(all(target_vendor = "apple", not(miri)))] {
-        // Doesn't work in Miri, see <https://github.com/rust-lang/miri/issues/2589>.
-        mod darwin;
-        pub use darwin::Parker;
     } else if #[cfg(target_os = "xous")] {
         mod xous;
         pub use xous::Parker;
diff --git a/src/tools/build-manifest/src/main.rs b/src/tools/build-manifest/src/main.rs
index 741d7e3fa16..28adba3b0fc 100644
--- a/src/tools/build-manifest/src/main.rs
+++ b/src/tools/build-manifest/src/main.rs
@@ -94,6 +94,8 @@
     "armv7r-none-eabihf",
     "armv8r-none-eabihf",
     "armv7s-apple-ios",
+    "armv7-apple-ios",
+    "armv6-apple-ios",
     "bpfeb-unknown-none",
     "bpfel-unknown-none",
     "i386-apple-ios",
